---
title: "EDS 223: Week 8"
format: html
editor_options: 
  chunk_output_type: console
---

```{r}
library(terra)
library(sf)
library(tidyverse)
library(here)
library(tmap)
```

```{r}
# Define a function to compute the Normalized Difference Vegetation Index (NDVI). This gives us the difference in reflectance between near infrared (nir) amd red bands, normalized by their sum

ndvi_fun <- function(nir, red) {
  (nir - red) / (nir + red)
}
```

### Compute NDVI for a single scene
```{r}
# We have 8 scenes collected on 8 different days
# We're going to start with reading in the one on June 12, 2018
landsat_20180612 <- terra::rast(here("data","landsat_20180612.tif"))

# Rename the names of the layers to match the spectral bands they correspond to
names(landsat_20180612) <- c("blue","green","red", "NIR", "SWIR1", "SWIR2")

# Apply the NDVI function we created to compute NDVI for this scene
# We use `landsat_20180612[[c(4,3)]]` to use the 4th layer first and the 3rd layer second 
ndvi_20180612 <- lapp(landsat_20180612[[c(4,3)]], fun=ndvi_fun)
```

```{r}
# Now let's make a map! (this is still only for the first scene)
tm_shape(ndvi_20180612) +
  tm_raster(title = "NDVI") +
  tm_layout(legend.outside = TRUE)
```

### Compute NDVI for all scenes

```{r}
rm(list = ls())

ndvi_fun <- function(nir, red) {
  (nir - red) / (nir + red)
}
```

```{r}
# function to generalize to all scenes
create_ndvi_layer <- function(i) {
  
  # Step 1: read in scene
  landsat <- terra::rast(files[i])
  
  # Step 2: rename bands in scene
  names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")
  
  # Step 3: NDVI
  ndvi <- lapp(landsat[[c(4,3)]], fun = ndvi_fun)
  
  return(ndvi)
}
```

```{r}
# Create a data frame with all our files so we can index into our files
files <- list.files(here("data"),
                    pattern = "*.tif",
                    full.names=TRUE)
```

```{r}
# Use function on just one scene to see if it worked
test <- create_ndvi_layer(1)
```

```{r}
# Use function on all 8 scenes
all_ndvi <- c(create_ndvi_layer(1),
              create_ndvi_layer(2),
              create_ndvi_layer(3),
              create_ndvi_layer(4),
              create_ndvi_layer(5),
              create_ndvi_layer(6),
              create_ndvi_layer(7),
              create_ndvi_layer(8))

names(all_ndvi) <- c("2018-06-12",
                     "2018-08-15",
                     "2018-10-18",
                     "2018-11-03",
                     "2019-01-22",
                     "2019-02-23",
                     "2019-04-12",
                     "2019-07-01")
```

```{r}
# How to pull the date out of the file name and update the names with those dates, rather than doing it all manually like we did above
file_names <- data.frame(file_name = files) %>%
  mutate(date = str_sub(file_name, start = -12L, end = -5L))

names(all_ndvi) <- file_names$date
```

## Compare NDVI across vegetation communities

### Get data on veg. communities

```{r}
# Read in vegetation data
sites <- st_read(here("data","study_sites.shp"))

# Make a map
tm_shape(all_ndvi[[1]]) +
  tm_raster() +
  tm_shape(sites) +
  tm_polygons() +
  tm_layout(legend.show = FALSE)
```

### Extract NDVI at study sites

```{r}
# Find average NDVI within each study site
sites_ndvi <- terra::extract(all_ndvi, sites, fun = "mean")
# Add the site names to our sites_ndvi 
sites_annotated <- cbind(sites, sites_ndvi)
```

```{r}
# Now, we need to tidy up our data in order to plot it 
sites_clean <- sites_annotated %>%
  # initial cleaning
  select(-ID) %>% # remove ID generated by extract function
  st_drop_geometry() %>% # drop geometry
  
  # reformat data frame
  pivot_longer(!study_site) %>% # pivot around the study_site
  rename("NDVI" = value) %>% # change "value" column to be "NDVI"
  
  # create date attribute
  mutate("year" = str_sub(name, 2, 5), # pull out elements of the date
         "month" = str_sub(name, 6, 7),
         "day" = str_sub(name, -2, -1)) %>%
  unite("date", 4:6, sep = "-") %>% # combine date elements in date format
  mutate("date" = lubridate::as_date(date)) %>%
  
  # rename combine study sites by vegetation type
  mutate("veg_type" = case_when(study_site == "forest1" ~ "forest",
                                study_site == "forest2" ~ "forest",
                                study_site == "forest3" ~ "forest",
                                study_site == "grassland" ~ "grassland",
                                study_site == "chaparral" ~ "chaparral")) %>%
  
  # summarize results by vegetation type
  group_by(veg_type, date) %>%
  summarize("NDVI" = mean(NDVI, na.rm = TRUE))
```

```{r}
# Plot results
ggplot(sites_clean,
       aes(x = date, y = NDVI,
           group = veg_type, col = veg_type)) +
  scale_color_manual(values = c("#EAAC8B", "#315C2B","#9EA93F")) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(x = "", y = "Normalized Difference Vegetation Index (NDVI)", col = "Vegetation type",
       title = "Seasonal cycles of vegetation productivity") 
```


